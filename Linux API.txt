
Linux API:
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <dirent.h>
#include <string.h>
#include <sys/stat.h>

#define BUF_SIZE 4096

// Function to list directory contents
void list_directory(const char *path) {
    DIR *dir;
    struct dirent *entry;

    // Open the directory
    dir = opendir(path);
    if (dir == NULL) {
        perror("opendir");
        exit(EXIT_FAILURE);
    }

    // Read and print directory contents
    while ((entry = readdir(dir)) != NULL) {
        printf("%s\n", entry->d_name);
    }

    // Close the directory
    closedir(dir);
}

// Function to copy a file
void copy_file(const char *source, const char *destination) {
    int source_fd, dest_fd;
    ssize_t bytes_read, bytes_written;
    char buffer[BUF_SIZE];

    // Open the source file for reading
    source_fd = open(source, O_RDONLY);
    if (source_fd == -1) {
        perror("open");
        exit(EXIT_FAILURE);
    }

    // Create or open the destination file for writing
    dest_fd = open(destination, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);
    if (dest_fd == -1) {
        perror("open");
        close(source_fd);
        exit(EXIT_FAILURE);
    }

    // Copy data from source to destination
    while ((bytes_read = read(source_fd, buffer, BUF_SIZE)) > 0) {
        bytes_written = write(dest_fd, buffer, bytes_read);
        if (bytes_written != bytes_read) {
            perror("write");
            close(source_fd);
            close(dest_fd);
            exit(EXIT_FAILURE);
        }
    }

    // Close file descriptors
    close(source_fd);
    close(dest_fd);
}

// Function to move a file
void move_file(const char *source, const char *destination) {
    // Rename the source file to the destination file
    if (rename(source, destination) == -1) {
        perror("rename");
        exit(EXIT_FAILURE);
    }
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <command> [arguments]\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    const char *command = argv[1];

    if (strcmp(command, "ls") == 0) {
        // Check if directory path is provided as argument
        const char *dir_path = (argc > 2) ? argv[2] : ".";
        // List the contents of the directory
        list_directory(dir_path);
    } else if (strcmp(command, "cp") == 0) {
        if (argc != 4) {
            fprintf(stderr, "Usage: %s cp <source> <destination>\n", argv[0]);
            exit(EXIT_FAILURE);
        }
        // Copy the file
        copy_file(argv[2], argv[3]);
        printf("File copied successfully.\n");
    } else if (strcmp(command, "mv") == 0) {
        if (argc != 4) {
            fprintf(stderr, "Usage: %s mv <source> <destination>\n", argv[0]);
            exit(EXIT_FAILURE);
        }
        // Move the file
        move_file(argv[2], argv[3]);
        printf("File moved successfully.\n");
    } else {
        fprintf(stderr, "Unknown command: %s\n", command);
        exit(EXIT_FAILURE);
    }

    return 0;
}

Process Management: Deadlock Avoidance (Banker's Algorithm):


#include <stdio.h>

#define MAX_PROCESSES 10
#define MAX_RESOURCES 10

int processes[MAX_PROCESSES];
int allocation[MAX_PROCESSES][MAX_RESOURCES];
int max[MAX_PROCESSES][MAX_RESOURCES];
int available[MAX_RESOURCES];
int need[MAX_PROCESSES][MAX_RESOURCES];
int finished[MAX_PROCESSES];

int main() {
    int num_processes, num_resources;
    // Read input for num_processes, num_resources, allocation, max, and available arrays

    // Calculate need matrix
    for (int i = 0; i < num_processes; ++i) {
        for (int j = 0; j < num_resources; ++j) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }

    // Banker's Algorithm logic
    int safe_sequence[MAX_PROCESSES], work[MAX_RESOURCES];
    int num_finished = 0;
    for (int i = 0; i < num_resources; ++i) {
        work[i] = available[i];
    }

    while (num_finished < num_processes) {
        int found = 0;
        for (int i = 0; i < num_processes; ++i) {
            if (!finished[i]) {
                int j;
                for (j = 0; j < num_resources; ++j) {
                    if (need[i][j] > work[j]) {
                        break;
                    }
                }
                if (j == num_resources) {
                    for (int k = 0; k < num_resources; ++k) {
                        work[k] += allocation[i][k];
                    }
                    safe_sequence[num_finished++] = i;
                    finished[i] = 1;
                    found = 1;
                }
            }
        }
        if (!found) {
            printf("System is in deadlock\n");
            return 1;
        }
    }

    printf("Safe Sequence: ");
    for (int i = 0; i < num_processes; ++i) {
        printf("%d ", safe_sequence[i]);
    }
    printf("\n");

    return 0;
}
